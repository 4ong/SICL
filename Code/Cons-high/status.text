What is done:

  There are definitions of all c*r functions except car and cdr, 
  and there are tests for those functions. 

  There are definitions of first, second, ..., tenth, 
  and there are tests for those functions.

  There is a definition and a compiler macro for the list function,
  and there are tests for it as well.

  There is a definition and a compiler macro for the list* function,
  and there are tests for it as well.

  There are definitions of the functions last, copy-list, list-length,
  make-list, nth, and nthcdr, with tests.

  Function copy-tree with tests.

  Function tree-equal with tests.

  Function endp with tests.

  mapcar (function and compiler macro) with tests.

  mapc (function and compiler macro) with tests.

  maplist (function and compiler macro), with tests.

  mapl (function and compiler macro), with tests.

  mapcan (function and compiler macro), with tests.  

  mapcon (function and compiler macro), with tests.

  append (function only), with tests.

  nconc (function only), with tests.

  revappend, with tests. 

  nreconc, with tests.

  butlast, with tests.

  nbutlast, function and special case for n = 1, with tests.

  subst, function with several special cases, with tests.

  subst-if, function with several special cases, with tests.

  subst-if-not, function with several special cases, with tests.

  nsubst, function with several special cases, with tests.

  nsubst-if, function with several special cases, with tests.

  nsubst-if-not, function with several special cases, with tests

  assoc, function with several special cases,  with tests.

  assoc-if, function with several special cases, with tests.

  assoc-if-not, function with several special cases, with tests.

  rassoc, function with several special cases, with tests.

  rassoc-if, function with several special cases, with tests.

  rassoc-if-not, function with several special cases, with tests.

  sublis, function with several special cases, with tests.

  nsublis, function with several special cases, with tests.

  member, function with several special cases, with tests.

  member-if, function with two special cases, with tests.

  member-if-not, function with two special cases, with tests.

  null, function only, with tests.  The null type is defined
  to be equivalent to cl:null for now. 

  acons, function with tests.

  pairlis, function with tests.

  copy-alist, function with tests.

  tailp, function with tests. 

  ldiff, function with tests.

  union, function with several special cases, with tests.

  nunion, function with several special cases, with tests.

  intersection, function with several special cases, with tests.

  nintersection, function with several special cases, with tests.

  set-difference, function with several special cases, with tests.

  nset-difference, function with several special cases, with tests.

  adjoin, function with some special cases, with tests.

  set-exclusive-or, function with several special cases, with tests.

  nset-exclusive-or, function with several special cases, with tests.

  subsetp, function with several special cases, with tests.

  getf, function, with tests.

  get-properties, function, with tests. 

  macro push, with tests.

  macro pop, with tests.

  setf expander for rest.

  function (setf nth)

  setf expander for getf, with tests. 

  macro remf, with tests.

  pushnew, macro with several special cases.  Several tests, but still
  need tests to check for possible multiple evaluations and correct
  evaluation order. 

  There are specific conditions and English-language condition
  reporters for those conditions. 

  There are docstrings for some functions. 

How to test it:

  1. Load lisp-unit.lisp and cons-high.asd into your lisp system.

  2. Run (asdf:operate 'asdf:load-op :sicl-cons-high-test).

  3. Do (in-package #:sicl-cons-high-test).

  4. Do a (run-tests) you should see some failures and some
     successes.  The failures are that type-error should be singaled,
     but simple-error was signaled instead. 

What remains to to:

  Write the remaining docstrings. 

  Make sure the tests cover all of the code.

  Modify the order of arguments to specialized versions of functions
  that take :key, :test, and :test-not keyword parameters, so as to
  make that order uniform across all functions.
