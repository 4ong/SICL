What is done:

  There are definitions of all c*r functions except car and cdr, 
  and there are tests for those functions. 

  There are definitions of first, second, ..., tenth.  No tests. 

  There is a definition and a compiler macro for the list function,
  and there are tests for it as well.

  There is a definition and a compiler macro for the list* function,
  and there are tests for it as well.

  There are definitions of the functions last, copy-list, list-length,
  make-list, nth, and nthcdr.

  Function copy-tree with some tests.

  Function tree-equal with some tests.

  Function endp with tests.

  mapcar (function and compiler macro) with tests.

  mapc (function and compiler macro), no tests.  

  maplist (function and compiler macro), no tests.  

  mapl (function and compiler macro), no tests.  

  mapcan (function and compiler macro), no tests.  

  mapcon (function and compiler macro), no tests.  

  append (function only), a few tests.

  nconc (function only), a few tests.

  revappend, no tests.

  nreconc, no tests.

  butlast, no tests.

  nbutlast, function and special case for n = 1, no tests.

  subst, function with several special cases.  No tests.

  subst-if, function with several special cases.  No tests.

  subst-if-not, function with several special cases.  No tests.

  nsubst, function with several special cases.  No tests.

  nsubst-if, function with several special cases.  No tests.

  nsubst-if-not, function with several special cases.  No tests.

  assoc, function with several special cases.  No tests.

  assoc-if, function with several special cases.  No tests.

  assoc-if-not, function with several special cases.  No tests.

  sublis, function with several special cases.  No tests.

  member, function with several special cases.  No tests.

How to test it:

  1. Load lisp-unit.lisp and cons-high.asd into your lisp system.

  2. Run (asdf:operate 'asdf:load-op :sicl-cons-high-test).

  3. Do (in-package #:sicl-cons-high-test).

  4. Do a (run-tests) you should see some failures and some
     successes.  The failures are that type-error should be singaled,
     but simple-error was signaled instead. 

What remains to to:

  Define a subclass of type-error and make the functions signal 
  that condition instead of signaling a simple-error.

  Add tests to test functions that are currently not tested. 

  Include more functions that can be found in the conses dictionary:

     nsublis
     null
     ldiff
     tailp
     member-if
     member-if-not
     acons
     copy-alist
     pairlis
     rassoc
     rassoc-if
     rassoc-if-not
     get-properties
     getf
     intersection
     nintersection
     adjoin
     set-difference
     nset-difference
     set-exclusive-or
     nset-exclusive-or
     subsetp
     union
     nunion
  
