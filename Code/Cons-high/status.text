What is done:

  Definitions all the functions in the conses dictionary of the
  HyperSpec except CONS, CAR, CDR, RPLACA, RPLACD, CONSP, ATOM.

  Definitions of special versions of many of the functions that 
  take keyword arguments such as :key, :test, and :test-not or
  optional arguments. 

  Compiler macros for some of the functions that take keyword
  arguments or optional arguments.

  Definitions of setf expanders for all the accessors of the conses
  dictionary except (SETF CAR), (SETF CDR), (SETF NTH). 

  Definitions of setf functions for all the accessors in addition to
  the setf expanders above except (SETF GETF), so that they can be
  used with FUNCALL and APPLY, including a setf function (SETF NTH).

  Definitions of all the macros in the conses dictionary. 

  Some 15 or so conditions that are special versions of the standard
  conditions, allowing us to detect exceptional situations in much
  greater detail than if we had just used standard conditions. 

  Condition reporters (US English) for our special conditions with
  much more complete and precise messages than would have been
  possible without our special conditions. 

  Very detailed documentation strings (US English) for all the
  functions in the conses dictionary.

  A considerable test suite with almost 2000 tests, giving us more
  than 99% test coverage.

How to test it:

  1. Load lisp-unit.lisp and cons-high.asd into your lisp system.

  2. Run (asdf:operate 'asdf:load-op :sicl-cons-high-test).

  3. Do (in-package #:sicl-cons-high-test).

  4. Do a (run-tests).  All tests should pass.

What remains to do:

  Short term:

    Write documentation strings for types, system classes, setf
    expanders and setf functions.

    Increase test coverage even more. 

    Write function (SETF GETF)

    Write a setf expander for (SETF NTH)

    Write compiler macros for functions that might otherwise have
    substantial overhead at runtime with respect to argument parsing,
    especially in the presence of keyword arguments. 

  Medium term:

    Write compiler macros for all functions taking optional and/or
    keyword arguments. 

    Performance comparisons with native implementations of
    corresponding functions etc of common implementations of Common
    Lisp. 

    Add more comments to the code, making it have more like a literate
    programming style, thus allowing easier access to the code by
    people who want to learn how one might implement Common Lisp.

  Long term:

    Modify the order of arguments to specialized versions of functions
    that take :key, :test, and :test-not keyword parameters, so as to
    make that order uniform across all functions.

    Add meters.  For each specialized function with significant
    running time, tally the number of calls.  For functions operating
    on lists, tally the length of the list.  

    Add documentation strings and condition reporters for other
    languages than US English.
