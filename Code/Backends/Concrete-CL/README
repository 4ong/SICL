This directory contains a concrete Common Lisp backend, and an
embryonic cross compiler for that backend.  

The backend is concrete in that it deals with real layout in the
memory of a real machine.  This layout can be used in a backend for a
real machine, except that the instruction format (which, as far as the
layout is concerned is just a sequence of words in memory) is specific
to this backend.

ISSUES ABOUT CROSS COMPILATION

There are some issues about writing a cross compiler for Common Lisp.
By cross compiler, I mean a file compiler that translates a source
file in Common Lisp to a FASL file for some Common Lisp system T (for
Target), but the cross compiler runs in a different system H (for
Host) written in a language LH that may or may not be Common Lisp.
It is not possible according to the standard to write such a compiler
in general, because many restrictions assume that the compiler runs in
the same system into which the generated code will subsequently be
loaded using LOAD.  The purpose of this text is to explore what
(minimal) restrictions would be required, both on the compiler and on
the code being compiled, in order for cross compilation to be
possible. 

First, let us make the thought experiment that H is not a Common Lisp
system, so that LH is not Common Lisp.

It is trivial to show that it is not possible to allow for the full
features of Common Lisp in the source file in this case.  To take but
one example, the source file is supposed to be read by the Common Lisp
READ function, but that function does not exist in H.  So is it then
not possible to write a function that reads Common Lisp source using
LH?  It cannot be done if all the features of Common Lisp are needed,
because the source file may contain the `#.' construct (read-eval)
whereby arbitrary Common Lisp expressions are evaluated at read time.
This construct seems to require a full Common Lisp system to be
available as the host H.

Now that we have shown that it is essentially impossible to have the
full features of Common Lisp if LH is not Common Lisp, let us explore
three possibilities: 1: Defining a subset (as large as possible) of
Common Lisp that could be compiled even if LH is not Common Lisp; 2:
Requiring LH to be Common Lisp, and exploring the effects of this
requirement; 3: Writing an interpreter for Common Lisp in LH so that a
full compiler could be run. 

It turns out that in case 2, there are some subtle dangers that can be
hard to identify.  As an example, consider a host system H that has
only one floating-point numeric type and a target system T with more
than one such type.  If the READ function of H is used to read the
source file, then the resulting internal representation cannot
distinguish between different floating-point types.  In other words,
the internal representation of the source code created by the READ
function of H is not an accurate representation of the source code.
It can be a quite difficult mental exercise to separate H and T when
LH is Common Lisp.  For that reason, we start by exploring case 1,
which, although not realistic, makes the mental exercise easier.
Furthermore, the restrictions that are necessary in case 1 give us
an "upper bound" on the restrictions that are required in case 2 from
which we can then explore various allowable exceptions. 

So let us start by investigating case 1, i.e., we need to determine a
subset of Common Lisp that could be compiled using a host system H
writing in a language LH, and with LH being a language other than
Common Lisp.  We will also investigate what features are required by H
in order to compile the source code.

Let us start by examining what happens when the source code is read.
As we have already pointed out above, we must disallow the `#.'
(read-eval) construct, because it would require us to be able to
evaluate arbitrary Common Lisp code at read time.  Furthermore, we
must disallow arbitrary reader macros in the source code, because a
reader macro associates arbitrary Common Lisp code to be run when some
particular combination of source characters is seen.  Again, since we
do not have a Common Lisp system available at compile time, we must
disallow this feature.  Existing standard reader features that are
typically implemented as reader macros, such as `#(' etc. must be
implemented by H in other ways, provided that this feature is actually
used in the source code.  If a feature is not used in the source code,
it need not be implemented in H.  Other than that, when the source
code is read, H is free to choose any internal representation of it,
as long as this internal representation preserves the features of the
target system T.  Again, as an example, this internal representation
will have to distinguish between different floating-point formats in
the same way T does, provided that floating-point numbers are actually
used in the source code that the cross compiler will process.  It is
not necessary, however, to distinguish between FIXNUMs and BIGNUMs at
this point, because that distinction is preserved by the magnitude of
the integer.

After the source code has been read, it is compiled.  Again, we must
disallow features that might cause arbitrary Common Lisp code to be
executed at compile time.  Clearly, this restriction rules out the
construct (eval-when (:compile-toplevel ...) ...).  But there are more
serious restrictions.  In particular, just like we have to disallow
arbitrary reader macros during the read phase, we have to disallow
arbitrary macros during the compilation phase, simply because a macro
is a Common Lisp function that runs at compile time (or more
precisely, at macro-expansion time) and which transforms source code
in internal representation to other source code in internal
representation.  We can allow DEFMACRO forms, but we cannot allow them
to have any effect on the compilation of other source code.  It would
simply define the macro when the FASL file is loaded.  In a way
analogous to the read phase, H would have to implement existing
standard macros that are needed by source code as special cases.  Some
of these would be absolutely crucial (such as DEFUN, DEFPARAMETER,
etc.) while others might not be used in code to be compiled by the
cross compiler (such as LOOP).  No compiler macros are needed, because
the Common Lisp standard allows for implementations to completely
ignore them.  Thus, conforming source code must work correctly even
though compiler macros are not taken into account.

A compiler might need to perform some operations on source code with
semantics defined by Common Lisp.  Typically, a compiler would
evaluate expressions that are known to be constant, such as arithmetic
operations on literal numbers.  But there is no need to do this,
because the only effect of NOT doing it is that resulting code is
slower, but it suffices to recompile the code with the native
compiler, once the native compiler is up and running.  

Now, let's investigate case 2, i.e., the case where H is a Common Lisp
system, so LH is Common Lisp.  Clearly, if we apply the same
restrictions as in case 1, we are safe.  But the question is how we
might be able to take advantage of the Common Lisp language to
simplify the implementation of the cross compiler.

Let's start again with the function to be used to read source code.  A
function similar to that of the READ function of H would have to be
implemented.  The difference between the READ function of H and the
one that has to be implemented is that the latter must generate an
internal representation of the source code according to the
requirements of T.  A valid question though is: "if H is free to
choose the representation of source code of T, then why not just use
the same representation as H uses?".  As indicated above, the answer
is that it is not possible in general, for instance because of
differences in representation of floating-point numbers.  H and T
might also differ with respect to the interpretation of potential
numbers.  Other than that, a similar implementation strategy can be
chosen for the source-code reader as with the READ function of H.
Reader macros could be implemented the same way, except that they
would have to generate the representation of T rather than that of H.

Now, if we think about the restrictions on the reader indicated above,
and if we keep in mind that the only code that ever needs to be
compiled by the cross compiler is the native compiler, then we shall
see that the READ function of H can be used.  First, we can make sure
that the source code to be compiled by the cross compiler does not
contain any literal floating-point numbers.  Should a floating point
number be required, we could make sure it is computed as opposed to
existing in literal form.  Similarly, we could make sure that the
cross compiler does not deal with potential numbers.  Remains the
problem of symbols.  Symbols can appear in 5 different ways in source
code.  The first and most common way is without any package
indicator.  The symbol is created in the current package unless it
already exists.  This case can be handled by making sure that the
source code to be cross-compiled always uses a fresh current package.
No attempt would then be made by READ to use symbols in the host
environment that it should not have access to, and there would be no
effects to the host environment (other than creating the fresh
package) as a result of reading the source code.  The second way a
symbol can appear is with a single package marker and a package
prefix, referring to an external symbol in a package usually other
than the current one.  In such a case, the package referred to must
also exist in the host environment before the compilation begins.
If possible, this case should be avoided.  The third way a symbol can
appear in source code is with two prefix markers and a package
prefix.  This syntax refers to a potentially unexported symbol in the
package indicated.  The symbol is created if it does not exist.  It is
good to avoid this case.  The fourth way in which a symbol can
appear in source code is with an initial package marker.  This refers
to a keyword symbol and represents no danger even though the host
environment is affected.  Finally, a symbol can appear with the syntax
#:name which refers to an uninterned symbol.  Again, this case
represents no problem. 

In other words, with some precaution, the READ function of H can be
used to read the source code of T to be compiled by the cross
compiler.  This fact has many great advantages.  In particular, macro
expansion can use the standard Common Lisp method, i.e., apply a
macro-expansion function to a source-code form to obtain a replacement
source-code form, as we shall see now.

Now that we have taken care of reading source code to be compiled by
the cross compiler, we need to investigate potential restrictions due
to the fact that the cross compiler executes in H rather than T.  



case 2: allow reader macros and macros that generate the
representation used by the cross compiler. 

Another thing that will sometimes work is to define a macro (such as
loop), translate the source code from cross-compiler internal
representation to native Common Lisp format of H, then print the
result to a string, and read it with the cross-reader. 


