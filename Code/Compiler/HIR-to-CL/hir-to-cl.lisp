(cl:in-package #:sicl-hir-to-cl)

(defun make-code-bindings (initial-instruction context)
  (let ((enter-instructions (sort-functions initial-instruction)))
    (loop for enter-instruction in (butlast enter-instructions)
          collect `(,(gethash enter-instruction (function-names context))
                    ,(translate-enter-instruction enter-instruction context)))))

(defun hir-to-cl (initial-instruction)
  (let ((enter-instructions (sort-functions initial-instruction))
        (context (make-instance 'context)))
    (loop for enter-instruction in (butlast enter-instructions)
          do (setf (gethash enter-instruction (function-names context))
                   (gensym "code")))
    (make-code-bindings initial-instruction context)))
