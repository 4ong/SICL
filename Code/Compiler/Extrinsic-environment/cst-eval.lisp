(cl:in-package #:sicl-extrinsic-environment)

(defgeneric cst-eval (cst environment1 environment2))

(defun compile-cst (cst environment1 environment2)
  (let* ((cleavir-generate-ast:*compiler* 'cl:eval)
	 (ast (cleavir-cst-to-ast:cst-to-ast cst environment1 nil)))
    (let* ((ast-bis (cleavir-ast-transformations:hoist-load-time-value ast))
           (hir (cleavir-ast-to-hir:compile-toplevel ast-bis))
           (ignore (cleavir-hir-transformations:eliminate-typeq hir))
           (lambda-expr (translate hir environment2))
           (fun (compile nil lambda-expr)))
      (declare (ignore ignore))
      (cons fun (cleavir-ir:forms hir)))))

(defmethod cleavir-env:cst-eval (cst environment1 (environment2 environment))
  (let ((form (cst:raw cst)))
    (cond ((and (consp form)
                (consp (cdr form))
                (null (cddr form))
                (eq (car form) 'quote))
           (cadr form))
          ((and (symbolp form)
                (nth-value 1 (sicl-global-environment:constant-variable
                              form environment1)))
           (nth-value 0 (sicl-global-environment:constant-variable
                         form environment1)))
          ((and (atom form) (not (symbolp form)))
           form)
          ((and (consp form)
                (consp (cdr form))
                (consp (cddr form))
                (null (cdddr form))
                (eq (car form) 'sicl-global-environment:function-cell)
                (eq (caddr form) 'sicl-global-environment:*global-environment*)
                (consp (cadr form))
                (consp (cdr (cadr form)))
                (null (cddr (cadr form)))
                (eq (car (cadr form)) 'quote))
           (sicl-global-environment:function-cell (cadr (cadr form))
                                                  environment2))
          ((and (consp form)
                (consp (cdr form))
                (consp (cddr form))
                (null (cdddr form))
                (eq (car form) 'sicl-global-environment:function-cell)
                (equal (caddr form) '(sicl-global-environment:global-environment))
                (consp (cadr form))
                (consp (cdr (cadr form)))
                (null (cddr (cadr form)))
                (eq (car (cadr form)) 'quote))
           (sicl-global-environment:function-cell (cadr (cadr form))
                                                  environment2))
          ((and (consp form)
                (consp (cdr form))
                (consp (cddr form))
                (null (cdddr form))
                (eq (car form) 'sicl-global-environment:variable-cell)
                (eq (caddr form) 'sicl-global-environment:*global-environment*)
                (consp (cadr form))
                (consp (cdr (cadr form)))
                (null (cddr (cadr form)))
                (eq (car (cadr form)) 'quote))
           (sicl-global-environment:variable-cell (cadr (cadr form))
                                                  environment2))
          ((and (consp form)
                (consp (cdr form))
                (consp (cddr form))
                (null (cdddr form))
                (eq (car form) 'sicl-global-environment:variable-cell)
                (equal (caddr form) '(sicl-global-environment:global-environment))
                (consp (cadr form))
                (consp (cdr (cadr form)))
                (null (cddr (cadr form)))
                (eq (car (cadr form)) 'quote))
           (sicl-global-environment:variable-cell (cadr (cadr form))
                                                  environment2))
          ((eq form 'sicl-global-environment:*global-environment*)
           environment2)
          (t
           (let ((fun-and-forms (compile-cst cst environment1 environment2)))
             (tie (car fun-and-forms) (cdr fun-and-forms)
                  environment1 environment2))))))
