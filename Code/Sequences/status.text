What is done:

  find-if, find-if-not. (functions and compiler macros)
  Tests from Paul Dietz' ansi test suite for those functions

  find (function only). 

  position, position-if, position-if-not (functions only).

  length.
  Tests from Paul Dietz' ansi test suite for that function.

  reduce

  fill (function only).

  remove, remove-if, remove-if-not (functions only).  A few tests. 

  delete, delete-if, delete-if-not (functions only).  No tests.

  copy-seq.  No tests. 

  elt.  No tests.

  subseq.  No tests

  count, count-if, count-if-not (functions only). No tests.

  nsubstite, nsubstitute-if, nsubstitute-if-not (function only).  No tests.

  substite, substitute-if, substitute-if-not (function only).  No tests.

  reverse, nreverse 

  docstrings for all functions except concatenate and merge. 

How to test it:

  1. Load lisp-unit.lisp and sequences.asd into your lisp system.

  2. Run (asdf:operate 'asdf:load-op :sicl-sequences-test).

  3. Do (in-package #:sicl-sequences-test).

  4. Do a (run-tests)

What remains to to:

  Add tests that use APPLY and non-constant keyword arguments, so that
  we can test the functions find-if and find-if-not, and not the
  specialized versions created by the compiler macro.

  We need a subclass of the type-error condition, say
  not-a-proper-sequence that we can signal in case the sequence is
  not a proper sequence. 

  We also need a subclass of the type-error condition, say
  not-a-valid-sequence-index that we can signal in case some index is
  not a valid sequence index.  

  Add more sequence functions.

    find

      Write the compiler macro.
      Include the tests. 

    position, position-if, position-if-not

      Write the compiler macro.
      Include the tests.

    remove, remove-if, remove-if-not

      Write the compiler macro.
      write more tests. 

    delete, delete-if, delete-if-not

      Write the compiler macro.
      Include the tests.

    fill

      Write the compiler macro.
      Include the tests.

    count, count-if, count-if-not

      Write the compiler macro.
      Include the tests.

    substite, substitute-if, substitute-if-not

      Write the copiler macro.
      Write tests.

    nsubstite, nsubstitute-if, nsubstitute-if-not

      Write the copiler macro.
      Write tests.

    reverse, nreverse 

      Write tests.

    make-sequence

      I don't know how to do this portably at the moment.  The problem
      is that it is implementation-dependent what a recognizable
      subtype of (say) a vector is. 

    (setf subseq)

      Special version for the case where :end is not given or is nil. 

    map

      To get around the problem of not being able to expand
      user-defined types, we get around it in the following way: 

         Using subtypep, we check whether result-type is a subtype of
	 list, in which case, we build a list out of the computed
	 elements and count the number of elements.  Finally we check
	 whether (list <length>) is a subtype of the supplied
	 result-type. 

	 If the result-type is not a subtype of list, then we compute
	 the length of the sequence to return and call make-sequence
	 on the supplied result-type and this length.  We then fill in
	 the sequence using the computed values.

      We should probably provide special versions for common
      combinations of argument types and result types.

    map-into

      Provide special versions for 1 and 2 sequences, and for all 
      combinations of types of the sequences (including the resulting
      sequence). 

    sort, stable-sort

      Use quicksort for sort and perhaps heapsort for stable-sort. 

    search

      It is easy to do a quadratic version of this.  Is it possible to
      do better in the presence of arbitrary tests?  I suppose it
      would be possible to make a special version if sequence-1 is 
      constant, and the test is eql.  Then it should be possible to
      construct an automaton.  But is it worth it? 

    mismatch

    replace

      There is an interesting special case here, namely when the two
      sequences are the same, the regions overlap, and the target
      region is located after the source region.  In that case, one
      cannot copy from the beginning to the end.  It is possible to
      copy from the end to the beginning, but that might defeat the
      prefetch policiy of the cache.  If the two regions are
      sufficiently far apart, sub-regions of the size corresponding to
      the difference in start position could be copied from end to
      start, each sub-region being copied from start to end.  Again,
      is it worth it?  It might be, because this is actually used to
      implement gap-buffers used in things like Climacs. 

    concatenate

      See map.

    merge

      See map.

    remove-duplicates, delete-duplicates

      Special versions when the test is one for which we can portably 
      create a hash table, because then we can determine by looking in
      the hash table whether we have seen the element before.
