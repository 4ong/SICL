==================================================
Progress of the project.

Question:
How can I run SICL?

Answer:
You can't!  It is not finished.

Question:
What part of SICL works?

Answer:
The Cleavir compiler framework can be used to turn Common Lisp into
high-level intermediate representation (HIR) and some optimizations
can be performed on HIR.  Also, some modules work, like LOOP and the
reader.  Most of the remaining code is written, but is not in a shape
to be used in a meaningful way by other systems.
==================================================
First-class global environments

Question:
What are first-class global environments?

Answer:
First class global environments represent a feature whereby the system
may contain several global environments, allowing the programmer to
switch between them, for various reasons.

Question:
Why can't first-class global environments be added to an existing
Common Lisp system?

Answer:
Most existing systems access global functions using an indirection
through the symbol naming them.  This technique makes it impossible to
have different definitions of a function with a particular name in
different environments.  In SICL the "function slot" is detached from
the symbol and attached to the global environment instead.

Question:
Sandboxing is notoriously difficult in existing Common Lisp systems.
Will it be easier in SICL?

Answer:
Yes, first-class global environments allow the creation of restricted
environments so that one may, for example, disallow the evaluation of
arbitrary forms.

Question:
Will SICL be safer than existing Common Lisp systems?

Answer:
Yes, with existing systems, the entire code is always available.
Nothing prevents an external system from modifying the compiler to
install a virus, or from forking a process in the name of the
unsuspecting user.  With first-class global environments, it is
possible to isolate sensitive code so that some additional action
(password maybe) on the part of the programmer is required in order to
access or modify it.
==================================================
Garbage collection

Question:
How is the SICL garbage collector better than that of existing systems?

Answer:
A lot of progress has been made on memory management during the past
decades, and the memory management of most existing systems was
written several decades ago.  Only the per-thread garbage-collection
technique to be used in SICL has been determined.  For the global
collector, the plan is to have an incremental and concurrent collector
that can then use additional cores of the processor.
==================================================
Bootstrapping

Question:
Suppose I write a minimal Lisp system in C.  Can I use the SICL
modules to load the rest of the functionality of a complete Common
Lisp system into my minimal system?

Answer:
No, unfortunately not.  We initially thought that this would be
possible, but over time we realized that it would require the use of a
very restricted subset of Common Lisp in order to write the code of
certain modules, and that would have had a serious negative impact on
maintainability of those modules.

Question:
How is SICL going to be bootstrapped?

Answer:
The plan is to use an existing Common Lisp implementation that
has support for the CLOSER-MOP library.  This host implementation is
used to execute SICL code for creating the MOP hierarchy of classes.
Then, additional code is executed in order to create a graph of SICL
objects in the host memory.  Finally, the graph is traversed with the
purpose of creating an isomorphic graph in an executable file which
will constitute the initial system.  Additional code is finally loaded
from FASL files so obtain the complete system.

